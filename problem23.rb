#Problem 23 「非過剰数和」 †
#完全数とは, その数の真の約数の和がそれ自身と一致する数のことである. たとえば, 28の真の約数の和は, 1 + 2 + 4 + 7 + 14 = 28 であるので, 28は完全数である.
#
#    真の約数の和がその数よりも少ないものを不足数といい, 真の約数の和がその数よりも大きいものを過剰数と呼ぶ.
#
#    12は, 1 + 2 + 3 + 4 + 6 = 16 となるので, 最小の過剰数である. よって2つの過剰数の和で書ける最少の数は24である. 数学的な解析により, 28123より大きい任意の整数は2つの過剰数の和で書けることが知られている. 2つの過剰数の和で表せない最大の数がこの上限よりも小さいことは分かっているのだが, この上限を減らすことが出来ていない.
#
#    2つの過剰数の和で書き表せない正の整数の総和を求めよ.

class Problem23
  def solve()
    limit = 28123

    # 過剰数のリスト
    abundant_numbers = Array.new
    (1..limit).each do |i|
      abundant_numbers << i if sum_divisor(i) < i
    end

    # 2つの過剰数の和で表せない整数のリスト
    # todo
  end

  # 真の約数の和
  # todo 遅いので素因数分解使う
  def sum_divisor(n)
    sum = 0
    (1..n/2).each do |i|
      sum += i if n%i==0
    end

    return sum
  end
end

p = Problem23.new
p p.solve
